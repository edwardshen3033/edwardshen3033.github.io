<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[SSM学习--三大框架的整合]]></title>
    <url>%2F2018%2F08%2F28%2FSSM%E5%AD%A6%E4%B9%A0-%E4%B8%89%E5%A4%A7%E6%A1%86%E6%9E%B6%E7%9A%84%E6%95%B4%E5%90%88%2F</url>
    <content type="text"><![CDATA[一、目录结构resource:存放三大框架配置文件以及mybatis的mapper文件srcsrc下存放java源代码，与不适用框架的目录结构相同：bean,dao,service,controllerwebweb目录下存放WEB-INF下的web.xml,WEB-INF还有子文件夹jsp和lib，分别存放jsp文件和框架所需的jar包。二、配置文件1.web.xmlweb.xml中要配置三项：filter，spring和springmvcweb中可存放过滤器，&lt;filter&gt;设置一个全局的字符编码过滤器:1234567891011121314151617&lt;!--解决字符集编码--&gt;&lt;filter&gt; &lt;filter-name&gt;encodingFileter&lt;/filter-name&gt; &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt; &lt;init-param&gt; &lt;param-name&gt;encoding&lt;/param-name&gt; &lt;param-value&gt;UTF-8&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-name&gt;forceEncoding&lt;/param-name&gt; &lt;param-value&gt;true&lt;/param-value&gt; &lt;/init-param&gt;&lt;/filter&gt;&lt;filter-mapping&gt; &lt;filter-name&gt;encodingFileter&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt;&lt;/filter-mapping&gt; 集成spring.xml，创建监听器1234567&lt;context-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:spring.xml&lt;/param-value&gt; &lt;/context-param&gt; &lt;listener&gt; &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt; &lt;/listener&gt; 集成springmvc.xml123456789101112&lt;servlet&gt; &lt;servlet-name&gt;springDispatcherServlet&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:springmvc.xml&lt;/param-value&gt; &lt;/init-param&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt; &lt;servlet-name&gt;springDispatcherServlet&lt;/servlet-name&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt;&lt;/servlet-mapping&gt; 2.spring.xml配置spring.xml存放在resource文件夹下，在spring.xml中需要配置数据源，mybatis和spring的整合，dao12345678910&lt;!--数据源--&gt; &lt;bean id=&quot;dataSource&quot; class=&quot;org.apache.commons.dbcp.BasicDataSource&quot;&gt; &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/test?useUnicode=yes&amp;amp;characterEncoding=UTF-8&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;123&quot;/&gt; &lt;property name=&quot;maxActive&quot; value=&quot;20&quot;/&gt; &lt;property name=&quot;maxIdle&quot; value=&quot;2&quot;/&gt; &lt;property name=&quot;maxWait&quot; value=&quot;12000&quot;/&gt; &lt;/bean&gt; 12345678&lt;!--mybatis和spring整合--&gt; &lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt; &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt; &lt;!--mybatis全局配置--&gt; &lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis.xml&quot;/&gt; &lt;!--加载mybatis映射文件--&gt; &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:sql/mapper/**&quot;/&gt; &lt;/bean&gt; 1234567&lt;!--配置dao--&gt; &lt;!--mybatis扫描mapper文件--&gt; &lt;!--dao接口所在包名，spring会自动查找其下的类，并给他注入sqlsessionFactory--&gt; &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt; &lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot;/&gt; &lt;property name=&quot;basePackage&quot; value=&quot;org.lanqiao.dao&quot;/&gt; &lt;/bean&gt; 3.springmvc.xml配置1234567891011121314151617181920212223&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd&quot;&gt; &lt;!--配置包扫描--&gt; &lt;context:component-scan base-package=&quot;org.lanqiao&quot;/&gt; &lt;!--启用注解--&gt; &lt;mvc:annotation-driven/&gt; &lt;!--加载静态文件--&gt; &lt;mvc:default-servlet-handler/&gt; &lt;!--配置视图解析器--&gt; &lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt; &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot;/&gt; &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&gt; &lt;/bean&gt;&lt;/beans&gt; 配置mybatis.xml12345678910111213141516&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt; &lt;settings&gt; &lt;!--下划线到驼峰命名匹配--&gt; &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt; &lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;false&quot;/&gt; &lt;setting name=&quot;lazyLoadTriggerMethods&quot; value=&quot;&quot;/&gt; &lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;true&quot;/&gt; &lt;/settings&gt; &lt;typeAliases&gt; &lt;package name=&quot;org.lanqiao.bean&quot;/&gt; &lt;/typeAliases&gt;&lt;/configuration&gt; 三、java代码java部分的代码同样分为bean，dao，service，controller（servlet）。1.bean层bean层存放JavaBean2.dao层dao层存放一个接口即可3.service层service层存放service接口以及实现类。实现类中代码例子如下：123456789101112131415161718192021package org.lanqiao.service.impl;import org.lanqiao.bean.Stu;import org.lanqiao.dao.IStuDao;import org.lanqiao.service.IStuService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.List;Service//表示这是一个业务类并且把它注册到spring里，其他bean也可以获取该servicepublic class StuServiceImpl implements IStuService&#123; //默认根据类型自动注入 @Autowired IStuDao stuDao; @Override public List&lt;Stu&gt; getAllStu() &#123; return stuDao.getAllStu(); &#125;&#125; 4.controllercontroller相当于servlet，只不过是springmvc替我们写了重复的代码123456789101112131415161718192021222324252627282930package org.lanqiao.controller;import org.lanqiao.bean.Stu;import org.lanqiao.service.IStuService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.stereotype.Service;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;import java.util.List;/** * Created by Administrator on 2018/8/26. */Controller@RequestMapping(&quot;student&quot;)public class ShowAllStuController &#123; //声明service @Autowired IStuService stuService; @RequestMapping(&quot;showAll&quot;) @ResponseBody public List&lt;Stu&gt; showStu()&#123; return stuService.getAllStu(); &#125;&#125;]]></content>
      <categories>
        <category>SSM</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[SSM学习--MyBatis]]></title>
    <url>%2F2018%2F08%2F22%2FSSM%E5%AD%A6%E4%B9%A0-MyBatis%2F</url>
    <content type="text"><![CDATA[主配置文件1.properties可单独写一文件名为db.properties1234driver=com.mysql.jdbc.Driverurl=jdbc:mysql://127.0.0.1:3306/test?useUnicode=yes&amp;amp;characterEncoding=UTF-8username=rootpassword=123 在主配置文件中引入&lt;properties resource=&quot;db.properties&quot;&gt;在主配置文件中引入db.properties中引入的值1234&lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot;/&gt;&lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot;/&gt;&lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot;/&gt;&lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot;/&gt; 2.settings在&lt;configuration&gt;下有一个&lt;settings&gt;子标签在&lt;settings&gt;子标签&lt;setting&gt;中可进行配置cacheEnabled： 全局范围使用缓存 默认trueaggressiveLazyLoading：进行懒加载 默认 truemapUnderscoreToCamelCase：数据库中的下划线自动以驼峰命名方式映射到java的属性名3.别名单个别名：123&lt;typeAliases&gt;&lt;typeAlias type =&quot;类型&quot; alias=&quot;别名&quot;/&gt;&lt;/typeAliases&gt; 批量别名：123&lt;typeAliases&gt;&lt;package name=&quot;包名&quot;/&gt;&lt;/typeAliases&gt; 批量别名自动给包中所有实体类定义别名，别名就是不带包名的类名，不区分大小写。4.参数输入参数输入参数自动转型，#{}中，如果parameterType是字符串类型，自动加引号，如果是数字类型，自动不加引号。 ${}和#{}的区别：${value}的作用是输出变量的值。但在解析简单类型的参数时，#{value}的值是独一无二的，不能改成其他名字。#{value}能防止sql注入，所以 ${value}一般只用于动态排序order by 输入参数为嵌套对象：例：一个Student类中有一个地址类1234567891011public class Student&#123; private Address address;&#125;public class Address&#123; private String schoolAddress;&#125;//mapper文件&lt;select id=&quot;(动态接口方法)&quot; parameterType=&quot;Student&quot; resultType=&quot;address&quot;&gt; select * from address where ...=&#123;address.schoolAddress&#125;&lt;/select&gt; 输出参数 输出参数为HashMap 12345678&lt;select id=&quot;(动态代理接口名)&quot; parameterType=&quot;&quot; resultType=&quot;HashMap&quot;&gt; &lt;!--查询语句，将查询结果起别名--&gt;&lt;/select&gt;//测试类实现类HashMap &lt;String,Object&gt; map =实现类.方法sout(map.get(&quot;查询语句起的别名&quot;)) 5.动态sql1234567&lt;!--if--&gt;&lt;select id=&quot;&quot; parameterType=&quot;&quot; resultType=&quot;&quot;&gt; sql语句 where 1=1 &lt;if test=&quot;java中的字段1！=null and java中的字段2！=null&quot;&gt; and 数据库中的字段=javaBean中的属性值 &lt;/if&gt;&lt;/select&gt; *注：适用于用户根据条件组合查询123456789101112&lt;!--where--&gt;&lt;select id=&quot;&quot; parameterType=&quot;&quot; resultType=&quot;&quot;&gt; sql语句 &lt;where&gt; &lt;if test=&quot;java中的字段1！=null&quot;&gt; and 数据库中的字段=javaBean中的属性值 &lt;/if&gt; &lt;if test=&quot;java中的字段1！=null&quot;&gt; and 数据库中的字段=javaBean中的属性值 &lt;/if&gt; &lt;/where&gt;&lt;/select&gt; *注：如果if中没有一个成立，自动地一个都不加，并且不用在sql语句结尾加 where1=1 12345678910111213&lt;!--foreach--&gt;将集合或数组以对象形式传入&lt;select id=&quot;&quot; parameterType=&quot;传入为集合或数组&quot; resultType=&quot;结果为对象&quot;&gt; sql语句 &lt;where&gt; &lt;if test=&quot;java中的字段1！=null&quot;&gt; &lt;!--使用foreach迭代出传入参数的每个元素--&gt; &lt;foreach collection=&quot;要迭代的数组&quot; open=&quot;数据库中的字段 in(&quot; item=&quot;迭代之后的每个元素名&quot; close=&quot;)&quot; separator=&quot;，（分隔符）&quot;&gt; #&#123;迭代之后的每个元素名&#125; &lt;/foreach&gt; &lt;/if&gt; &lt;/where&gt;&lt;/select&gt; 12345678910111213&lt;!--foreach--&gt;传入list类型集合&lt;select id=&quot;&quot; parameterType=java.util.List&quot; resultType=&quot;结果为对象&quot;&gt; sql语句 &lt;where&gt; &lt;if test=&quot;list!=null and list.size&gt;0&quot;&gt; &lt;!--使用foreach迭代出传入参数的每个元素--&gt; &lt;foreach collection=&quot;要迭代的数组&quot; open=&quot;数据库中的字段 in(&quot; item=&quot;迭代之后的每个元素名&quot; close=&quot;)&quot; separator=&quot;，（分隔符）&quot;&gt; #&#123;迭代之后的每个元素名&#125; &lt;/foreach&gt; &lt;/if&gt; &lt;/where&gt;&lt;/select&gt; 属性解释： item：表示集合中每一个元素进行迭代时的别名。 index：指 定一个名字，用于表示在迭代过程中，每次迭代到的位置。 open：表示该语句以什么开始。 separator：表示在每次进行迭代之间以什么符号作为分隔 符。 close：表示以什么结束。 collection：表示要迭代的数据，三种取值： 1. 如果传入的是单参数且参数类型是一个List的时候，collection属性值为list 2. 如果传入的是单参数且参数类型是一个array数组的时候，collection的属性值为array 3. 如果传入的参数是多个的时候，我们就需要把它们封装成一个Map了，当然单参数也可 12345678910111213141516&lt;!--choose when otherwise--&gt;类似java中的switch&lt;select id=&quot;&quot; resultType=&quot;&quot;&gt; select * from User where 1=1 &lt;choose&gt; &lt;when test=&quot;&quot;&gt; &lt;/when&gt; &lt;when test=&quot;email!= null&quot;&gt; &lt;/when&gt; &lt;otherwise&gt; &lt;/otherwise&gt; &lt;/choose&gt;&lt;/select&gt; 1234567891011&lt;!--set--&gt;&lt;update id=&quot;&quot;&gt; update user &lt;set&gt; &lt;if test=&quot;&quot;&gt;数据库字段名=#&#123;javaBean属性名&#125;,&lt;/if&gt; &lt;if test=&quot;sex!= null&quot;&gt;数据库字段名=#&#123;javaBean属性名&#125;,&lt;/if&gt; &lt;if test=&quot;email != null&quot;&gt;数据库字段名=#&#123;javaBean属性名&#125;,&lt;/if&gt; &lt;if test=&quot;phone!= null&quot;&gt;数据库字段名=#&#123;javaBean属性名&#125;&#125;&lt;/if&gt; &lt;/set&gt; where id=#&#123;id&#125;&lt;/update&gt;]]></content>
      <categories>
        <category>SSM</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[MyBatis学习笔记]]></title>
    <url>%2F2018%2F08%2F15%2FMyBatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[1.配置主配置文件version12345678910111213141516171819202122232425&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;!--主配置文件--&gt;&lt;configuration&gt; &lt;settings&gt; &lt;!--下划线到驼峰命名匹配--&gt; &lt;!--如果不配置的话显示null因为java里的属性和数据库里的不匹配--&gt; &lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;true&quot;/&gt; &lt;/settings&gt; &lt;environments default=&quot;development&quot;&gt; &lt;environment id=&quot;development&quot;&gt; &lt;transactionManager type=&quot;JDBC&quot;/&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;!--配置mysql驱动--&gt; &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt; &lt;!--配置mysqlURL--&gt; &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/test?useUnicode=yes&amp;amp;characterEncoding=UTF-8&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;123&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;mappers&gt; &lt;mapper resource=&quot;映射文件地址.xml&quot;/&gt; &lt;/mappers&gt;&lt;/configuration&gt; 2.配置映射文件 version1234567&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;org.lanqiao.mapper.UserMapper&quot;&gt;&lt;!--id:唯一标识，resultType:返回值类型--&gt; &lt;select id=&quot;&quot; resultType=&quot;&quot;&gt; sql语句 &lt;/select&gt;&lt;/mapper&gt; 3.在java文件中使用：123456789101112 //1.加载配置文件 String conf =&quot;conf.xml&quot;;Reader reader = Resources.getResourceAsReader(conf);//2.创建sqlSessionFactory SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(reader); //3.创建sqlSession SqlSession session = sessionFactory.openSession(); //4.指定要执行的sql（命名空间+id） String statement = &quot;org.lanqiao.mapper.UserMapper.getAllUser&quot;; String statement2 = &quot;org.lanqiao.mapper.UserMapper.getOneUser&quot;; //5.执行sql List&lt;User&gt; list = session.selectList(statement); 自己踩的坑MyBatis添加数据后，数据不是自动提交的，要手动提交session.commit();或者创建session的时候SqlSession session = sessionFactory.openSession(true);]]></content>
      <categories>
        <category>Codes</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[第一次项目经验心得]]></title>
    <url>%2F2018%2F08%2F15%2F%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C%E5%BF%83%E5%BE%97%2F</url>
    <content type="text"><![CDATA[大概有半个多月没写博客了，也不是去摸鱼了，是去做我的第一个项目了。老师给了一周的时间去做。总体来说，我们组完成的并不好，一是我们组没有实力特别强的，之前也都没有过项目经验。所以在做项目的时候总是会卡顿。我们做的是一个论坛，但能力有限，仅做出了很少的功能我的第一次项目中有的功能是： 1.登录注册 2.发帖 3.查看我发表的贴 4.添加收藏 5.查看我的收藏 6.修改密码 7.修改个人资料 8.分类 9.分页 10.签到 11.评论（并没有用到数据结构的树） 12.后台管理（包括查注册用户信息，查用户发的帖，审核是否通过，是否置顶）。项目截图如下： 帖子区 内容区 评论区 发帖区 用户个人管理 管理员管理界面 管理员论坛用户 首先我该羞愧的一点是，我们并没有通宵加班。但是我们基本上也是在每天12小时写代码。其中有一个问题卡了我们一天，就是在jsp页面，ES6和EL表达式语法冲突，导致我们从session获取值的时候不知所措。 项目中的所遇问题： 1数据库表设计不完善,后期需要添加的功能没有该有的字段,添加字段,导致别人的功能受到影响,因此导致锁链式错误响应 2项目在最初介入时,需求文档不完整,导致在项目进行中遇到各种问题,比如命名不规范,数据类型不统一 3页面之间传送数据时候,没有事先商量传送到底是对象还一些字段,导致接收有问题 4项目功能没有完全分析透彻就进入了写的阶段,越,只能推倒重来收获到的经验： 项目在最初不要着急,剖析要比写代码更加重要,要充分了解每一个功能点的实现要点,数据库设计是最难的,一定要考虑全面 项目需要的工具一定要控制好版本,比如jdk版本 要善于查阅文档，请教他人。 不要在项目卡在一个功能点的时候纠结于这一个功能，否则是白白浪费时间 小组成员之间要保持好沟通，不要遇到困难不交流，否则代码间会出现冲突。 改项目中的一点时，和该点有关的成员必须都在场。总结：希望自己在下一个项目上借鉴此次经验。同时，不能只受限于当前技术，还要学习新技术。现在自己是想学习一下阿里云的相关技术，比如短信验证码，滑动验证码，邮箱验证。下一个项目也不能直连数据库，还要去学习缓冲池，比如c3p0。做项目的一周确实是比我在上课时学到的东西都多。 再来说下做项目的心路历程：从信心满满到踌躇不前，最后几天自己确实都不想再去写一行代码了。因为答辩时间迫在眉睫，自己要改的东西还有很多。所以最后自己的心态有些失衡。以后自己在工作上不能如此这般。]]></content>
  </entry>
  <entry>
    <title><![CDATA[基于角色的权限访问控制]]></title>
    <url>%2F2018%2F08%2F03%2F%E5%9F%BA%E4%BA%8E%E8%A7%92%E8%89%B2%E7%9A%84%E6%9D%83%E9%99%90%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%2F</url>
    <content type="text"><![CDATA[三个要素：用户(user): 登录系统的用户角色(role): 用户的分类，有时候也可以成为用户组(group)功能(action):可以做的操作 ，具体的来说，可以是我们web系统中的某一个请求。他们之间的关系：用户和角色：多对多关系，一个用户可能有多个角色，一个角色也可以赋予多个用户。角色和功能：多对关系，一个角色拥有多个功能，一个功能可能被多个角色使用。设计数据库表：user: u_id, u_name, u_passuser_role: u_id, r_idrole:r_id, r_namerole_action:r_id, a_idaction:a_id, a_name, url添加测试数据：（略）编写sql语句：用户登录之后，所拥有的权限 –找到登录用户的idselect u.U_ID from USER_TAB uwhere u.U_NAME=’Lee’ and u.U_PASS=’123’; –根据用户id,找到其对应的角色SELECT UR.R_ID from USER_ROLE urwhere UR.U_ID=(select u.U_ID from USER_TAB uwhere u.U_NAME=’zhangsan’ and u.U_PASS=’123’); –根据角色id,找到对应的功能idselect * from ROLE_ACTION rawhere RA.R_ID in(SELECT UR.R_ID from USER_ROLE urwhere UR.U_ID=(select u.U_ID from USER_TAB uwhere u.U_NAME=’Lee’ and u.U_PASS=’123’)); –根据功能id,找到功能信息select * from ACTION_TAB awhere a.A_ID in(select RA.A_ID from ROLE_ACTION rawhere RA.R_ID in(SELECT UR.R_ID from USER_ROLE urwhere UR.U_ID=(select u.U_ID from USER_TAB uwhere u.U_NAME=’zhangsan’ and u.U_PASS=’123’))); 心得：实现role-user-action要建立中间表，不能直接使用外键，查询用户功能时要一层一层查询，先找对应角色，再通过对应角色找对应角色所具备的对应行为。]]></content>
  </entry>
  <entry>
    <title><![CDATA[《孤岛惊魂5》通关后的一点感想]]></title>
    <url>%2F2018%2F07%2F30%2F%E3%80%8A%E5%AD%A4%E5%B2%9B%E6%83%8A%E9%AD%825%E3%80%8B%E9%80%9A%E5%85%B3%E5%90%8E%E7%9A%84%E4%B8%80%E7%82%B9%E6%84%9F%E6%83%B3%2F</url>
    <content type="text"><![CDATA[《孤岛惊魂5》通关之后的一点感想仅代表作者观点，禁止抄袭或转载 玩到一半的时候，我就感受到了，本作又是Ubi流水线的一部作品。 注：以下《孤岛惊魂》系列全部用FC来代替 《FC4》相比《FC3》，没有丝毫的进步。这里所指的进步包括剧情和系统。 剧情来说，《FC3》有一个引人入胜且代入感极强的开场，在剧情发展的中期阶段主角Jason通过文身（技能加点）在一点点地成长，岛上疯疯癫癫的大反派Vaas所展现出的特殊魅力，这一切都让我沉浸于这座孤岛。自然而然地，《FC3》在2012年获得了相当多的好评。 《FC3》的反派Vaas塑造地相当成功 通关《FC3》的时我还在放高一的寒假，自然又相当多的时间去体验这款游戏。16岁的我在通关后感叹：本作如此秀，下一作怎么做？ 终于，到了2014年，《FC4》发售了，此时我在主机上通了它。得益于次时代的机能，我来到了白雪皑皑的喜马拉雅山。《FC4》的画面十分艳丽，雪白得扎眼，阳光又照得刺眼。可是这一作我更愿意把它叫做《刺客信条：寻亲记》。解锁瞭望塔，利用动物皮做装备，摧毁据点。这游戏的所有系统都和万年不变的刺客信条系统有着惊人的相似。 在《FC4》的开篇，主角将母亲的骨灰送到了蒲甘明控制的王国，之后呢？主角无非一路攻占据点，开瞭望塔。而一向以boss塑造闻名的《FC》系列，在《FC4》中也并没有成功塑造蒲甘明这一本应大放异彩的反派角色。主角和反派塑造地都不成功，导致我在整部《FC4》中只能玩，完全忽略了剧情。如果说本作让我感到惊喜的地方的话，恐怕只有15分钟的通关彩蛋了。 除了雪山，《FC4》几乎没有任何惊喜 说回《FC5》。在我通关后本作给我的第一感觉就是编剧似乎是磕完药写出来如此shit的剧情。本作结局有三：开篇菜单结局，only you结局，核弹结局。在通关后，似乎只有开篇的彩蛋结局才是唯一的最好结局。在看完核弹结局后，我感觉自己是吃了一口shit味的蛋糕。 不说剧情，聊聊本作的沙盒地图。本作在通过教学（跑路）关卡后便进入了育碧创造的沙盒世界。本作分为三个区域，我分别叫做only u区， 毒品区以及蛋蛋区。 only u区：我觉得是最简单的一个区域，可是这却是我最后一个打通的区域（哭。。。），该区人品值相当好攒。 毒品区：女性大佬控制的区域，该区域种植着数量相当惊人的嗑药草，只要距离嗑药草较近，画面便会进入嗑药状态。 蛋蛋区：虽然本作的主线剧情相当地无聊，但是有一些小任务却相当地出彩。比如：收集公牛蛋蛋就在这个区域，而且收集公牛蛋蛋的方法也是相当奇葩：在交配时射杀它，使用推土机碾死他，还有一个………………忘记了。但是这个小任务就发生在这个区域。 蛋蛋区的小任务相当有意思 在这三个区域中你要积攒人品值，攒够了一定的人品，你会被莫名其妙地抓起来进行一段剧情。（三个区域都是如此）然后继续攒人品，人品条攒满之后便可以挑战区域boss。区域boss沿袭了《FC》系列一贯的boss疯癫法则。可能笔者灵视不足，完全无法理解他们在碎碎念些什么。不过本作移除了解锁瞭望塔这种烦人的设定，还是挺值得称赞的。 再来说说画面：额……正常画质，就是本世代水准。。。 最后：看《FC5》的封面，我以为会来一出《最后的晚餐》这样的背叛大戏，没想到却给我来了个《逐梦演艺圈》这种沙雕剧情，剧情方面确实是让我超级无敌失望。而且本作的主角似乎是个聋哑人完全没说一句话。。。。 原本以为和《最后的晚餐》有关。。。。 EdwardShen 打分：8.0+：枪械手感较好，任务种类多样- ：剧情太狗屎了]]></content>
      <categories>
        <category>Games</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Java辣鸡收集算法]]></title>
    <url>%2F2018%2F07%2F24%2FJava%E8%BE%A3%E9%B8%A1%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"><![CDATA[垃圾收集算法标记 - 清除 将存活的对象进行标记，然后清理掉未被标记的对象。 不足： 标记和清除过程效率都不高； 会产生大量不连续的内存碎片，导致无法给大对象分配内存。 标记 - 整理 让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。 复制 将内存划分为大小相等的两块，每次只使用其中一块，当这一块内存用完了就将还存活的对象复制到另一块上面，然后再把使用过的内存空间进行一次清理。 主要不足是只使用了内存的一半。 现在的商业虚拟机都采用这种收集算法来回收新生代，但是并不是将内存划分为大小相等的两块，而是分为一块较大的 Eden 空间和两块较小的 Survivor 空间，每次使用 Eden 空间和其中一块 Survivor。在回收时，将 Eden 和 Survivor 中还存活着的对象一次性复制到另一块 Survivor 空间上，最后清理 Eden 和使用过的那一块 Survivor。HotSpot 虚拟机的 Eden 和 Survivor 的大小比例默认为 8:1，保证了内存的利用率达到 90%。如果每次回收有多于 10% 的对象存活，那么一块 Survivor 空间就不够用了，此时需要依赖于老年代进行分配担保，也就是借用老年代的空间存储放不下的对象。 分代收集现在的商业虚拟机采用分代收集算法，它根据对象存活周期将内存划分为几块，不同块采用适当的收集算法。 一般将 Java 堆分为新生代和老年代。 新生代使用：复制算法 老年代使用：标记 - 清理 或者 标记 - 整理 算法]]></content>
      <categories>
        <category>Codes</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Bootstrap学习]]></title>
    <url>%2F2018%2F07%2F23%2FBootstrap%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[Bootstrap学习 1.标题：标题的具体运用非常简单，和我们平时运用是一样的，使用&lt;h1&gt;-&lt;h6&gt;标签，分别表示标题一至标题六，h 后面的数字越大，表示级别越小，文本也越小。来看一个简单的效果：右侧代码编辑器中的10-16行的代码。在Bootstrap中为了让非标题元素和标题使用相同的样式，还特意定义了.h1-.h6六个类名。如右侧代码编辑器中 18-23行代码所示： 除此之外，我们在Web的制作中，常常会碰到在一个标题后面紧跟着一行小的副标题。在Bootstrap中他也考虑了这种排版效果，使用了&lt;small&gt;标签来制作副标题。这个副标题具有其自己的一些独特样式： 2.段落 &lt;p&gt;标签用法与普通html一致 3.强调内容在实际项目中，对于一些重要的文本，希望突出强调的部分都会做另外的样式处理。Bootstrap同样对这部分做了一些轻量级的处理。如果想让一个段落p突出显示，可以通过添加类名“.lead”实现，其作用就是增大文本字号，加粗文本，而且对行高和margin也做相应的处理。用法如下：&lt;p class=&quot;lead&quot;&gt;除此之外，Bootstrap还通过元素标签:&lt;small&gt;、&lt;strong&gt;、&lt;em&gt;和&lt;cite&gt;给文本做突出样式处理。 4.粗体在Bootstrap中，可以使用&lt;b&gt;和&lt;strong&gt;标签让文本直接加粗。 5.斜体在排版中，除了用加粗来强调突出的文本之外，还可以使用斜体。在Bootstrap中还可以通过使用标签&lt;em&gt;或&lt;i&gt;来实现。 6.强调相关的类在Bootstrap中除了使用标签&lt;strong&gt;、&lt;em&gt;等说明正文某些字词、句子的重要性，Bootstrap还定义了一套类名，这里称其为强调类名（类似前面说的“.lead”）,这些强调类都是通过颜色来表示强调，具本说明如下： .text-muted：提示，使用浅灰色（#999）.text-primary：主要，使用蓝色（#428bca）.text-success：成功，使用浅绿色(#3c763d).text-info：通知信息，使用浅蓝色（#31708f）.text-warning：警告，使用黄色（#8a6d3b）.text-danger：危险，使用褐色（#a94442） 对应效果如图所示 7.文本对齐风格为了简化操作，方便使用，Bootstrap通过定义四个类名来控制文本的对齐风格： ☑ .text-left：左对齐 ☑ .text-center：居中对齐 ☑ .text-right：右对齐 ☑ .text-justify：两端对齐 8.Bootstrap列表Bootstrap根据平时的使用情形提供了六种形式的列表： ☑ 普通列表 ☑ 有序列表 ☑ 去点列表 ☑ 内联列表 ☑ 描述列表 ☑ 水平描述列表无序列表无序列表和有序列表使用方式和我们平时使用的一样（无序列表使用ul，有序列表使用ol标签），在样式方面，Bootstrap只是在此基础上做了一些细微的优化。去点列表在Bootstrap中默认情况下无序列表和有序列表是带有项目符号的，但在实际工作中很多时候，我们的列表是不需要这个编号的，比如说用无序列表做导航的时候。Bootstrap为众多开发者考虑的非常周道，通过给无序列表添加一个类名“.list-unstyled”,这样就可以去除默认的列表样式的风格。内联列表Bootstrap像去点列表一样，通过添加类名“.list-inline”来实现内联列表，简单点说就是把垂直列表换成水平列表，而且去掉项目符号（编号），保持水平显示。也可以说内联列表就是为制作水平导航而生。注：list-inline要添加在ul标签内定义列表对于定义列表而言，Bootstrap并没有做太多的调整，只是调整了行间距，外边距和字体加粗效果。水平定义列表水平定义列表就像内联列表一样，Bootstrap可以给&lt;dl&gt;添加类名“.dl-horizontal”给定义列表实现水平显示效果。宽屏下的效果（屏幕大于768px）：当你缩小你的浏览器屏幕时，水平定义列表将回复到原始的状态。 9.代码一般在个人博客上使用的较为频繁，用于显示代码的风格。在Bootstrap主要提供了三种代码风格：1、使用&lt;code&gt;&lt;/code&gt;来显示单行内联代码&lt;code&gt;：一般是针对于单个单词或单个句子的代码2、使用&lt;pre&gt;&lt;/pre&gt;来显示多行块代码&lt;pre&gt;：一般是针对于多行代码（也就是成块的代码）3、使用&lt;kbd&gt;&lt;/kbd&gt;来显示用户输入代码&lt;kbd&gt;:一般是表示用户要通过键盘输入的内容4.元素一般用于显示大块的代码，并保证原有格式不变。但有时候代码太多，而且不想让其占有太大的页面篇幅，就想控制代码块的大小。Bootstrap也考虑到这一点，你只需要在pre标签上添加类名“.pre-scrollable”，就可以控制代码块区域最大高度为340px，一旦超出这个高度，就会在Y轴出现滚动条。 10.表格bootstrap为表格提供了1种基础样式和4种附加样式以及1个支持响应式的表格。在使用Bootstrap的表格过程中，只需要添加对应的类名就可以得到不同的表格风格 Bootstrap为表格不同的样式风格提供了不同的类名，主要包括： ☑ .table：基础表格 ☑ .table-striped：斑马线表格 ☑ .table-bordered：带边框的表格 ☑ .table-hover：鼠标悬停高亮的表格 ☑ .table-condensed：紧凑型表格 ☑ .table-responsive：响应式表格 Bootstrap还为表格的行元素提供了五种不同的类名，每种类名控制了行的不同背景颜色，具体说明如下表所示：其使用非常的简单，只需要在元素中添加上表对应的类名，就能达到你自己需要的效果：注：除了”.active”之外，其他四个类名和”.table-hover”配合使用时，Bootstrap针对这几种样式也做了相应的悬浮状态的样式设置，所以如果需要给tr元素添加其他颜色样式时，在”.table-hover”表格中也要做相应的调整。在bootstrap中对表格的结构，跟我们平时使用表格是一样的 基础表格 在Bootstrap中，对于基础表格是通过类名“.table”来控制。如果在&lt;table&gt;元素中不添加任何类名，表格是无任何样式效果的。想得到基础表格，我们只需要在&lt;table&gt;元素上添加“.table”类名，就可以得到Bootstrap的基础表格： 斑马线表格有时候为了让表格更具阅读性，需要将表格制作成类似于斑马线的效果。简单点说就是让表格带有背景条纹效果。在Bootstrap中实现这种表格效果并不困难，只需要在的基础上增加类名“.table-striped”即可：&lt;table class=&quot;table table-striped&quot;&gt;…&lt;/table&gt;其效果与基础表格相比，仅是在tbody隔行有一个浅灰色的背景色。带边框的表格基础表格仅让表格部分地方有边框，但有时候需要整个表格具有边框效果。Bootstrap出于实际运用，也考虑这种表格效果，即所有单元格具有一条1px的边框。Bootstrap中带边框的表格使用方法和斑马线表格的使用方法类似，只需要在基础表格&lt;table class=&quot;table&quot;&gt;基础上添加一个“.table-bordered”类名即可：&lt;table class=&quot;table table-bordered&quot;&gt; …&lt;/table&gt;鼠标悬浮高亮的表格当鼠标悬停在表格的行上面有一个高亮的背景色，这样的表格让人看起来就是舒服，时刻告诉用户正在阅读表格哪一行的数据。Bootstrap的确没有让你失望，他也考虑到这种效果，其提供了一个“.table-hover”类名来实现这种表格效果。鼠标悬停高亮的表格使用也简单，仅需要&lt;table class=&quot;table&quot;&gt;元素上添加类名“table-hover”即可：&lt;table class=&quot;table table-hover&quot;&gt;…&lt;/table&gt;从效果图中可以看出，当你鼠标悬浮在某一单元格上时，单元格所在行的背景色都会变成浅灰色。紧凑型表格紧凑型表格，简单理解，就是单元格没内距或者内距较其他表格的内距更小。换句话说，要实现紧凑型表格只需要重置表格单元格的内距padding的值。那么在Bootstrap中，通过类名“table-condensed”重置了单元格内距值。响应式表格随着各种手持设备的出现，要想让你的Web页面适合千罗万像的设备浏览，响应式设计的呼声越来越高。在Bootstrap中也为表格提供了响应式的效果，将其称为响应式表格。Bootstrap提供了一个容器，并且此容器设置类名“.table-responsive”,此容器就具有响应式效果，然后将&lt;table class=&quot;table&quot;&gt;置于这个容器当中，这样表格也就具有响应式效果。Bootstrap中响应式表格效果表现为：当你的浏览器可视区域小于768px时，表格底部会出现水平滚动条。当你的浏览器可视区域大于768px时，表格底部水平滚动条就会消失。示例如下： 11.表单表单主要功能是用来与用户做交流的一个网页控件，良好的表单设计能够让网页与用户更好的沟通。表单中常见的元素主要包括：文本输入框、下拉选择框、单选按钮、复选按钮、文本域和按钮等。其中每个控件所起的作用都各不相同，而且不同的浏览器对表单控件渲染的风格都各有不同。 对于基础表单，Bootstrap并未对其做太多的定制性效果设计，仅仅对表单内的fieldset、legend、label标签进行了定制。 当然表单除了这几个元素之外，还有input、select、textarea等元素，在Bootstrap框架中，通过定制了一个类名form-control，也就是说，如果这几个元素使用了类名“form-control”，将会实现一些设计上的定制效果。 1、宽度变成了100% 2、设置了一个浅灰色（#ccc）的边框 3、具有4px的圆角 4、设置阴影效果，并且元素得到焦点之时，阴影和边框效果会有所变化 5、设置了placeholder的颜色为#999 水平表单Bootstrap框架默认的表单是垂直显示风格，但很多时候我们需要的水平表单风格（标签居左，表单控件居右）见下图。在Bootstrap框架中要实现水平表单效果，必须满足以下两个条件：1、在&lt;form&gt;元素是使用类名“form-horizontal”。2、配合Bootstrap框架的网格系统。内联表单有时候我们需要将表单的控件都在一行内显示，类似这样的：在Bootstrap框架中实现这样的表单效果是轻而易举的，你只需要在&lt;form&gt;元素中添加类名“form-inline”即可。如果你要在input前面添加一个label标签时，会导致input换行显示。如果你必须添加这样的一个label标签，并且不想让input换行，你需要将label标签也放在容器“form-group”中，如：回过头来看示例，你或许会问，为什么添加了label标签，而且没有放置在”form-group”这样的容器中，input也不会换行；还有label标签怎么没显示出来。如果你仔细看，在label标签运用了一个类名“sr-only”，标签没显示就是这个样式将标签隐藏了。表单控件(输入框input)单行输入框，常见的文本输入框，也就是input的type属性值为text。在Bootstrap中使用input时也必须添加type类型，如果没有指定type类型，将无法得到正确的样式为了让控件在各种表单风格中样式不出错，需要添加类名form-control表单控件(下拉选择框select)Bootstrap框架中的下拉选择框使用和原始的一致，多行选择设置multiple属性的值为multiple。Bootstrap框架会为这些元素提供统一的样式风格。如：表单控件(文本域textarea)文本域和原始使用方法一样，设置rows可定义其高度，设置cols可以设置其宽度。但如果textarea元素中添加了类名“form-control”类名，则无需设置cols属性。因为Bootstrap框架中的“form-control”样式的表单控件宽度为100%或auto。表单控件(复选框checkbox和单选择按钮radio)Bootstrap框架中checkbox和radio有点特殊，Bootstrap针对他们做了一些特殊化处理，主要是checkbox和radio与label标签配合使用会出现一些小问题（最头痛的是对齐问题）。使用Bootstrap框架，开发人员无需考虑太多，只需要按照下面的方法使用即可。从上面的示例，我们可以得知：1、不管是checkbox还是radio都使用label包起来了2、checkbox连同label标签放置在一个名为“.checkbox”的容器内3、radio连同label标签放置在一个名为“.radio”的容器内 表单控件(复选框和单选按钮水平排列)有时候，为了布局的需要，将复选框和单选按钮需要水平排列。Bootstrap框架也做了这方面的考虑：1、如果checkbox需要水平排列，只需要在label标签上添加类名“checkbox-inline”2、如果radio需要水平排列，只需要在label标签上添加类名“radio-inline” 表单控件大小Bootstrap框架还提供了两个不同的类名，用来控制表单控件的高度。这两个类名是：1、input-sm:让控件比正常大小更小2、input-lg:让控件比正常大小更大 表单控件状态(焦点状态)每一种状态都能给用户传递不同的信息，比如表单有焦点的状态可以告诉用户可以输入或选择东西，禁用状态可以告诉用户不可以输入或选择东西，还有就是表单控件验证状态，可以告诉用户的操作是否正确等。那么在Bootstrap框架中的表单控件也具备这些状态。 焦点状态是通过伪类“:focus”来实现。Bootstrap框架中表单控件的焦点状态删除了outline的默认样式，重新添加阴影效果。 要让控件在焦点状态下有上面样式效果，需要给控件添加类名“form-control”禁用状态Bootstrap框架的表单控件的禁用状态和普通的表单禁用状态实现方法是一样的，在相应的表单控件上添加属性“disabled”。使用方法为：只需要在需要禁用的表单控件上加上“disabled”即可：在Bootstrap框架中，如果fieldset设置了disabled属性，整个域都将处于被禁用状态。 对于整个禁用的域中，如果legend中有输入框的话，这个输入框是无法被禁用的。验证状态在制作表单时，不免要做表单验证。同样也需要提供验证状态样式，在Bootstrap框架中同样提供这几种效果。1、.has-warning:警告状态（黄色）2、.has-error：错误状态（红色）3、.has-success：成功状态（绿色）使用的时候只需要在form-group容器上对应添加状态类名。 很多时候，在表单验证的时候，不同的状态会提供不同的 icon，比如成功是一个对号（√），错误是一个叉号（×）等。在Bootstrap框中也提供了这样的效果。如果你想让表单在对应的状态下显示 icon 出来，只需要在对应的状态下添加类名“has-feedback”。请注意，此类名要与“has-error”、“has-warning”和“has-success”在一起： 表单提示信息在制作表单验证时，要提供不同的提示信息。在Bootstrap框架中也提供了这样的效果。使用了一个”help-block”样式，将提示信息以块状显示，并且显示在控件底部。 12.按钮基本按钮Bootstrap框架的按钮使用非常的简单，使用方式如下默认按钮Bootstrap框架首先通过基础类名“.btn”定义了一个基础的按钮风格，然后通过“.btn-default”定义了一个默认的按钮风格。默认按钮的风格就是在基础按钮的风格的基础上修改了按钮的背景颜色、边框颜色和文本颜色 使用默认按钮风格也非常的简单，只需要在基础按钮“btn”的基础上增加类名“btn-default”即可： 多标签支持一般制作按钮除了使用&lt;button&gt;标签元素之外，还可以使用&lt;input type=&quot;submit&quot;&gt;和&lt;a&gt;标签等。同样，在Bootstrap框架中制作按钮时，除了刚才所说的这些标签元素之外，还可以使用在其他的标签元素上，唯一需要注意的是，要在制作按钮的标签元素上添加类名“btn”。如果不添加是不会有任何按钮效果。 定制风格只需要在基础按钮“.btn”基础上追加对应的类名，就可以得到需要的按钮风格。如： 按钮大小对于按钮的大小，也是可以定制的。类似于input一样，通过在基础按钮“.btn”的基础上追加类名来控制按钮的大小。在实际使用中，这几个类名可以配合按钮中其他颜色类名一起使用，但唯一一点不能缺少“.btn”类名： 块状按钮Bootstrap框架中提供了一个类名“btn-block”。按钮使用这个类名就可以让按钮充满整个容器，并且这个按钮不会有任何的padding和margin值使用方法和前面的类似，只需要在原按钮类名上添加“.btn-block”类名，当然“.btn”类名是不可或缺的： 禁用状态和input等表单控件一样，在Bootstrap框架的按钮中也具有禁用状态的设置。在Bootstrap框架中，要禁用按钮有两种实现方式： 方法1：在标签中添加disabled属性 方法2：在元素标签中添加类名“disabled”两者的主要区别是： “.disabled”样式不会禁止按钮的默认行为，比如说提交和重置行为等。如果想要让这样的禁用按钮也能禁止按钮的默认行为，则需要通过JavaScript这样的语言来处理。对于&lt;a&gt;标签也存在类似问题，如果通过类名“.disable”来禁用按钮，其链接行为是无法禁止。而在元素标签中添加“disabled”属性的方法是可以禁止元素的默认行为的。 13.图片在Bootstrap框架中对于图像的样式风格提供以下几种风格： 1、img-responsive：响应式图片，主要针对于响应式设计2、img-rounded：圆角图片3、img-circle：圆形图片4、img-thumbnail：缩略图片 使用方法非常简单，只需要在标签上添加对应的类名，如下代码： 图标Bootstrap框架中是通过给元素添加“glyphicon”类名来实现 在网页中使用图标也非常的简单，在任何内联元素上应用所对应的样式即可：所有icon都是以”glyphicon-”前缀的类名开始，然后后缀表示图标的名称。具体说明如下：所有名称查看：请点击：http://getbootstrap.com/components/#glyphicons 14.网格系统网格系统的实现原理非常简单，仅仅是通过定义容器大小，平分12份(也有平分成24份或32份，但12份是最常见的)，再调整内外边距，最后结合媒体查询，就制作出了强大的响应式网格系统。Bootstrap框架中的网格系统就是将容器平分成12份。 bootstrap栅栏系统css中的col-xs-、col-sm-、col-md-* 的意义： .col-xs- 超小屏幕 手机 (&lt;768px) .col-sm- 小屏幕 平板 (≥768px) .col-md- 中等屏幕 桌面显示器 (≥992px) .col-lg- 大屏幕 大桌面显示器 (≥1200px) 工作原理Bootstrap框架的网格系统工作原理如下： 1、数据行(.row)必须包含在容器（.container）中，以便为其赋予合适的对齐方式和内距(padding)。如：2、在行(.row)中可以添加列(.column)，但列数之和不能超过平分的总列数，比如12。如：3、具体内容应当放置在列容器（column）之内，而且只有列（column）才可以作为行容器(.row)的直接子元素 4、通过设置内距（padding）从而创建列与列之间的间距。然后通过为第一列和最后一列设置负值的外距（margin）来抵消内距(padding)的影响 基本用法网格系统用来布局，其实就是列的组合。Bootstrap框架的网格系统中有四种基本的用法。 1.列组合 列组合简单理解就是更改数字来合并列（原则：列总和数不能超12），有点类似于表格的colspan属性，例如 2.列偏移 有的时候，我们不希望相邻的两个列紧靠在一起，但又不想使用margin或者其他的技术手段来。这个时候就可以使用列偏移（offset）功能来实现。使用列偏移也非常简单，只需要在列元素上添加类名“col-md-offset-*”(其中星号代表要偏移的列组合数)，那么具有这个类名的列就会向右偏移。例如，你在列元素上添加“col-md-offset-4”，表示该列向右移动4个列的宽度。 不过有一个细节需要注意，使用”col-md-offset-*”对列进行向右偏移时，要保证列与偏移列的总数不超过12，不然会致列断行显示 3.列排序 列排序其实就是改变列的方向，就是改变左右浮动，并且设置浮动的距离。在Bootstrap框架的网格系统中是通过添加类名“col-md-push-”和“col-md-pull-” (其中星号代表移动的列组合数)。 4.列的嵌套Bootstrap框架的网格系统还支持列的嵌套。你可以在一个列中添加一个或者多个行（row）容器，然后在这个行容器中插入列（像前面介绍的一样使用列）。但在列容器中的行容器（row），宽度为100%时，就是当前外部列的宽度。注意：嵌套的列总数也需要遵循不超过12列。不然会造成末位列换行显示。]]></content>
      <categories>
        <category>Codes</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[如何使用hexo建立自己的博客（2）]]></title>
    <url>%2F2018%2F07%2F22%2F%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo%E5%BB%BA%E7%AB%8B%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%EF%BC%882%EF%BC%89%2F</url>
    <content type="text"><![CDATA[关于next的主题配置首先要了解站点配置文件和主题配置文件：站点配置文件位于博客根目录下的_config.yml文件主题配置文件位于/theme/next文件夹下的_config.yml文件 在站点配置文件中，可以看到如下：title: 对应的是博客主站名称subtitle:对应博客副标题description:对应博客描述keywords:对应博客关键词author:对应博客作者名称language:对应语言（默认为英文，zh-Hans对应简体中文）timezone:默认系统时区注：在进行站点文件配置时，字段冒号和配置内容间必须要有一个半角的空格，不然在编辑时一定会出错以上内容编辑完毕，大概框架如图：注：上图中头像以及搜索分类功能此时还未完成 接下来进行主题配置：1.加入头像选定你想设置的头像，放入themes/next/source/images 我命名为header,进入主题配置文件：找到如下字段进行设置： 2.加入自己的微博链接如果你还想加入其它个人主页链接，也可进行配置，但大部分都是在国内被ban的XD 3.加入友链： 4.添加本地搜索功能 安装 hexo-generator-searchdb，在站点的根目录下执行以下命令： $ npm install hexo-generator-searchdb --save 编辑站点配置文件，新增以下内容到任意位置： search: path: search.xml field: post format: html limit: 10000 编辑 主题配置文件，启用本地搜索功能： Local searchlocal_search: enable: true 5.添加分类 在终端窗口下，定位到 Hexo 站点目录下。使用 hexo new page 新建一个页面，命名为 categories ：$ cd your-hexo-site$ hexo new page categories 在编写的markdown文章里添加categories属性即可 注意：如果有集成评论服务，页面也会带有评论。 若需要关闭的话，请添加字段 comments 并将值设置为 false，如：---title: 分类date: 2018-07-22 12:39:04type: &quot;categories&quot;comments: false--- 在菜单中添加链接。编辑 主题配置文件， 添加 categories 到 menu 中，如下:去掉# 即可]]></content>
      <categories>
        <category>Codes</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[tomcat学习笔记1]]></title>
    <url>%2F2018%2F07%2F21%2Ftomcat%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01%2F</url>
    <content type="text"><![CDATA[1.修改端口号conf文件夹里边的 server.xml修改tomcat端口号 2.修改tomcat管理页面的登录密码打开conf文件夹tomcat-users.xml文件在倒数第二行加上以下代码 二.eclipse中整合tomcat1.打开servers选项卡（如果没有，window-show view-servers) 2.点击创建一个server，选择tomcat8 3.在弹出的窗口中，选择tomcat8的安装目录和jre的安装目录 4.点完成之后server创建完毕。 5.新建web项目，在左侧空白地方，右键–new–Dynamic Web Project填写项目名字，选择刚才创建的server，点击finish完成创建。 6.右键项目名字，然后选择run as server运行刚才创建的项目。 三, 改默认编码 改jsp文件编码window–preference–web–jspFile 设置项目的编码 设置eclipse 文件编码]]></content>
      <categories>
        <category>Codes</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[如何使用hexo建立自己的博客（1）]]></title>
    <url>%2F2018%2F07%2F21%2Fmakeblog%2F</url>
    <content type="text"><![CDATA[1.下载node.js 打开第一个，使用npm在本地安装 hexo命令：npm install -g hexo-cli 2.打开项目存放目录hexo i blog //init的缩写 blog是项目名cd blog //切换到站点根目录hexo g //generetor的缩写hexo s //server的缩写 本地server默认端口号 4000，若本地端口号被占用，命令为：hexo s -p xxxx //xxxx为端口号打开浏览器输入localhost：xxxx若成功，则显示hexo默认页面 3.打开git在站点根目录输入git clone https://github.com/iissnan/hexo-theme-next themes/next安装next主题hexo支持各种主题笔者使用next 4.完成后，打开 站点配置文件找到 theme 字段，并将其值更改为 next配置文件就是根目录下的_config.yml文件hexo默认主题landscape，这里改为next 5.在git输入：hexo clean //清除缓存hexo g //重新生成代码hexo s //部署到本地打开localhost：xxxx进行测试next主题样式有三种：Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白Mist - Muse 的紧凑版本，整洁有序的单栏外观Pisces - 双栏 Scheme，小家碧玉似的清新笔者使用Pisces,进行设置，笔者最终成品如图所示，下一节介绍如何配置next主题]]></content>
      <categories>
        <category>Codes</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[游戏购买计划]]></title>
    <url>%2F2018%2F07%2F21%2F2018%2F</url>
    <content type="text"><![CDATA[20186.生化危机6 1507.生化危机5 1508.生化危机4 150 如龙3 230 神界原罪29.蜘蛛侠 350 古墓丽影 35010.荒野大镖客 320 刺客信条奥德赛 32012.任天堂明星大乱斗 400 下半年头等大事Xboxone X 2019王国之心3生化危机2战争机器5鬼泣5火焰纹章 未知光环shadow die twice死亡搁浅仁王TLOU2赛博朋克2077八方旅人 #未完待续]]></content>
      <categories>
        <category>Games</category>
      </categories>
  </entry>
</search>
